@startuml RHI Classes

class IInstance
{
    +IInstance()
    +~IInstance()
    +{abstract} CreatePhysicalDevices(): bool
    +Destroy()
    +{abstract} GetMainPhysicalDevice(): std::shared_ptr<IPhysicalDevice>
    +{abstract} Initialize(const RendererDesc&): bool
    #m_bIsDebugLayerEnabled: bool
    #m_uMainPhysicalDeviceIndex: uint32
}

class IPhysicalDevice
{
    +~IPhysicalDevice()
    +{abstract} CreateDevice(): std::shared_ptr<IDevice>
    +Destroy()
    +{abstract} Initialize(): bool
    +GetInstance(): const IInstance&
    #IPhysicalDevice(IInstance&, IPhysicalDeviceDesc&)
}

IPhysicalDevice "n" --* "1" IInstance
IInstance --o IPhysicalDevice

class IDevice
{
    +~IDevice()
    +{abstract} CreateCommandPool(eQueueType queueType): std::shared_ptr<ICommandPool>
    +{abstract} CreateQueues(): bool
    +{abstract} CreateSwapChain(const RendererDesc&, const ISwapChainDesc&, IQueue&): bool
    +Destroy()
    +DestroySwapChain(ISwapChain&)
    +GetPhysicalDevice(): const IPhysicalDevice&
    +GetQueueOrNull(eQueueType queueType): std::shared_ptr<IQueue>
    +ReturnQueue(std::shared_ptr<IQueue>&): bool
    +GetSwapChain(): const ISwapChain&
    +GetSwapChain(): ISwapChain&
    #IDevice(IPhysicalDevice&)
    +{abstract} initialize(): bool
    #m_QueueToIndexMap: std::unordered_map<std::shared_ptr<IQueue>, uint32>
    #m_aFreeQueueIndicesByType: StaticArray<std::queue<uint32>, static_cast<size_t>(eQueueType::COUNT)>
    #m_aBusyQueueIndicesByType: StaticArray<std::unordered_set<uint32>, static_cast<size_t>(eQueueType::COUNT)>
}

IDevice "n" --* "1" IPhysicalDevice
IPhysicalDevice --o IDevice

class ISwapChain
{
    +~ISwapChain()
    +{abstract} Resize(uint32, uint32): bool
    +GetCurrentBackBufferIndex(): const uint32
    #ISwapChain(IDevice&)
    #m_uCurrentBackBufferIdx: uint32
}

ISwapChain --* IDevice
IDevice --o ISwapChain

class IQueue
{
    +~IQueue()
    +GetDevice(): const IDevice&
    +GetType(): const eQueueType
    #IQueue(IDevice&, const eQueueType&)
    #m_QueueType: eQueueType
}

IQueue "n" --* "1" IDevice
IDevice --o IQueue

class ICommandPool
{
    +~ICommandPool()
    #ICommandPool()
}

ICommandPool "n" --* "1" IDevice

@enduml